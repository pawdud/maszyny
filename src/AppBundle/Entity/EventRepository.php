<?php

namespace AppBundle\Entity;

use AppBundle\Entity\BaseRepository;
use AppBundle\Component\DatesTransformer;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends BaseRepository
{

    protected static $alias = 'event';
    protected static $entity = 'AppBundle:Event';

    /**
     * 
     * @param \DateTime $date
     * @return type
     * 
     * wyszukuje eventy z dnia
     */
    public function findAllByDay(\DateTime $date, $current_user_id)
    {
        $start = new \DateTime($date->format('Y-m-d 00:00'));
        $end = new \DateTime($date->format('Y-m-d 23:59:59'));
        return $this->findAllByDates($start, $end, $current_user_id);
    }

    /**
     * 
     * @param \DateTime $date
     * @return type
     * 
     * ustala datę poniedziałku i niedzieli z danego tygodnia, w którym zaiwera się data z adresu
     */
    public function findAllByWeek(\DateTime $date, $current_user_id)
    {
        $monday = DatesTransformer::toMonday($date)->setTime(0, 0);
        $sunday = DatesTransformer::toSunday($date)->setTime(23, 59, 59);
        return $this->findAllByDates($monday, $sunday, $current_user_id);
    }

    /**
     * 
     * @param \DateTime $date
     * @return type
     * 
     * ustala datę pierwszego i ostatniego dnia miesiąca w którym zawiera się data z adresu 
     */
    public function findAllByMonth(\DateTime $date, $current_user_id)
    {
        $start = DatesTransformer::toFirstMonthDay($date)->setTime(0, 0);
        $end = DatesTransformer::toLastMonthDay($date)->setTime(23, 59, 59);
        return $this->findAllByDates($start, $end, $current_user_id);
    }

    /**
     * 
     * @param \DateTime $start
     * @param \DateTime $end
     * @return 
     * 
     * wyszukuje eventy miedzy dwoma datami
     */
    public function findAllByDates(\DateTime $start, \DateTime $end, $current_user_id)
    {
        $q = $this->getEntityManager()->createQuery("SELECT e
                                     FROM AppBundle:Event e
                                     WHERE e.timeStart >= :start AND e.timeStart <= :end AND e.user = :current_user_id
                                     ORDER BY e.timeStart ASC, e.timeEnd ASC")
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->setParameter('current_user_id', $current_user_id);
        return $q->getResult();
    }

    public function customWhere($name, $value)
    {
        $a1 = self::getAlias();
        if ($name == 'technology2part')
        {
            $this->qb->andWhere("{$a1}.technology2part = :technology2part");
            $this->qb->setParameter('technology2part', $value);
            return true;
        }

        if ($name == 'q')
        {

            $this->qb->andWhere("{$a1}.name LIKE :q ");
            $this->qb->setParameter('q', "%{$value}%");
            return true;
        }
    }

}
